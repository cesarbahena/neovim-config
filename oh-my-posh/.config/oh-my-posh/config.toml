"$schema" = "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json"
version = 3
final_space = true

[palette]
black = "#090618"
blue = "#7e9cd8"
brightBlack = "#727169"
brightBlue = "#7FB4CA"
brightCyan = "#7AA89F"
brightGreen = "#98BB6C"
brightPurple = "#938AA9"
brightRed = "#E82424"
brightWhite = "#DCD7BA"
brightYellow = "#E6C384"
cyan = "#6A9589"
foreground = "#DCD7BA"
green = "#76946A"
purple = "#957FB8"
red = "#C34043"
white = "#C8C093"
yellow = "#C0A36E"

[[blocks]]
type = "prompt"
alignment = "left"

[[blocks.segments]]
type = "path"
style = "plain"
foreground = "p:brightBlue"
template = "{{ .Path }}{{ if not .Writable }} {{ end }}"
[blocks.segments.properties]
style = "agnoster_short"
max_depth = 3

[[blocks.segments]]
type = "git"
style = "plain"
foreground = "p:brightPurple"
template = """
{{ if not .UpstreamGone }} on {{ .HEAD }}\
{{ if ne .HEAD (trimPrefix "origin/" .Upstream) }}:{{ trimPrefix "origin/" .Upstream }}{{ end }}\
{{ else }} on {{ .HEAD }}{{ end }} \
"""
[blocks.segments.properties]
branch_icon = ""
fetch_status = true
fetch_upstream_icon = true

[[blocks.segments]]
type = "git"
style = "plain"
foreground = "p:brightYellow"
template = """
{{ if gt .StashCount 0 }} {{ end }}\
{{ if or (gt .Working.Deleted 0) (gt .Staging.Deleted 0) }}󱀷 {{ end }}\
{{ if or (gt .Working.Modified 0) (gt .Staging.Modified 0) }}󱇨 {{ end }}\
{{ if or (gt .Staging.Added 0) (gt .Working.Added 0) }}󰸩 {{ end }}\
{{ if gt .Working.Untracked 0 }}󰘓 {{ end }}\
{{ if gt .Behind 0 }}󰭽 {{ end }}\
{{ if gt .Ahead 0 }}󰭾 {{ end }}\
{{ if and (gt .Ahead 0) (gt .Behind 0) }}󰧠 {{ .Ahead }}/{{ .Behind }} {{ end }}\
"""
[blocks.segments.properties]
branch_icon = ""
fetch_status = true
fetch_upstream_icon = true

# Character / prompt symbol
[[blocks.segments]]
type = "text"
style = "plain"
foreground = "p:brightGreen"
template = "❯ "

[[blocks]]
type = "rprompt"
alignment = "right"
newline = false

[[blocks.segments]]
type = "command"
style = "plain"
foreground = "green"
template = "  {{ .Output }}"
[blocks.segments.properties]
shell = "bash"
command = '''
version=""; constraint=""; mismatch="false"
for dockerfile in Dockerfile dockerfile Dockerfile.node; do
  [ -f "$dockerfile" ] && version=$(grep -E '^FROM node:[0-9.]+' "$dockerfile" | head -n1 | sed -E 's/FROM node:([0-9.]+).*/\1/') && break
done
[ -z "$version" ] && [ -f ".nvmrc" ] && version=$(head -n1 .nvmrc | sed 's/^v//;s/[^0-9.].*$//')
[ -z "$version" ] && command -v node >/dev/null 2>&1 && version=$(node -v | sed 's/^v//')

if [ -f "package.json" ] && [ -n "$version" ]; then
  if command -v jq >/dev/null 2>&1; then
    constraint=$(jq -r '.engines.node // empty' package.json 2>/dev/null)
  else
    constraint=$(grep -E '"node"[[:space:]]*:[[:space:]]*"[^"]+"' package.json | sed -E 's/.*"node"[[:space:]]*:[[:space:]]*"([^"]+)".*/\1/')
  fi
  if [ -n "$constraint" ]; then
    actual_major=$(echo "$version" | cut -d'.' -f1)
    case "$constraint" in
      ">=20"|^20|~20*) [ "$actual_major" -lt 20 ] && mismatch="true" ;;
      ">=18"|^18|~18*) [ "$actual_major" -lt 18 ] && mismatch="true" ;;
      ">=16"|^16|~16*) [ "$actual_major" -lt 16 ] && mismatch="true" ;;
      ">=14"|^14|~14*) [ "$actual_major" -lt 14 ] && mismatch="true" ;;
      ">="*) required_major=$(echo "$constraint" | grep -oE '[0-9]+' | head -n1); [ -n "$required_major" ] && [ "$actual_major" -lt "$required_major" ] && mismatch="true" ;;
    esac
  fi
fi

[ -n "$version" ] && [ "$mismatch" = "false" ] && echo "$version"
'''

# NodeJS warning (solo aparece si HAY mismatch)
[[blocks.segments]]
type = "command"
style = "plain"
foreground = "red"
template = " {{ .Output }}" # muestra la versión en rojo si no cumple constraint
[blocks.segments.properties]
shell = "bash"
command = '''
# mismo script pero imprimiendo SOLO cuando mismatch=true
version=""; constraint=""; mismatch="false"
for dockerfile in Dockerfile dockerfile Dockerfile.node; do
  [ -f "$dockerfile" ] && version=$(grep -E '^FROM node:[0-9.]+' "$dockerfile" | head -n1 | sed -E 's/FROM node:([0-9.]+).*/\1/') && break
done
[ -z "$version" ] && [ -f ".nvmrc" ] && version=$(head -n1 .nvmrc | sed 's/^v//;s/[^0-9.].*$//')
[ -z "$version" ] && command -v node >/dev/null 2>&1 && version=$(node -v | sed 's/^v//')

if [ -f "package.json" ] && [ -n "$version" ]; then
  if command -v jq >/dev/null 2>&1; then
    constraint=$(jq -r '.engines.node // empty' package.json 2>/dev/null)
  else
    constraint=$(grep -E '"node"[[:space:]]*:[[:space:]]*"[^"]+"' package.json | sed -E 's/.*"node"[[:space:]]*:[[:space:]]*"([^"]+)".*/\1/')
  fi
  if [ -n "$constraint" ]; then
    actual_major=$(echo "$version" | cut -d'.' -f1)
    case "$constraint" in
      ">=20"|^20|~20*) [ "$actual_major" -lt 20 ] && mismatch="true" ;;
      ">=18"|^18|~18*) [ "$actual_major" -lt 18 ] && mismatch="true" ;;
      ">=16"|^16|~16*) [ "$actual_major" -lt 16 ] && mismatch="true" ;;
      ">=14"|^14|~14*) [ "$actual_major" -lt 14 ] && mismatch="true" ;;
      ">="*) required_major=$(echo "$constraint" | grep -oE '[0-9]+' | head -n1); [ -n "$required_major" ] && [ "$actual_major" -lt "$required_major" ] && mismatch="true" ;;
    esac
  fi
fi

[ -n "$version" ] && [ "$mismatch" = "true" ] && echo "$version"
'''

# PHP (lee Dockerfile o php -v)
[[blocks.segments]]
type = "command"
style = "plain"
foreground = "blue"
template = "  {{ .Output }}"
[blocks.segments.properties]
shell = "bash"
command = '''
version=""
[ -f "Dockerfile" ] && version=$(grep -E '^FROM php:[0-9.]+' Dockerfile | head -n1 | sed -E 's/FROM php:([0-9.]+).*/\1/')
[ -z "$version" ] && command -v php >/dev/null 2>&1 && version=$(php -v 2>/dev/null | head -n1 | awk '{print $2}' | cut -d'-' -f1)
[ -n "$version" ] && echo "$version"
'''

# Docker context (igual que starship docker_context)
[[blocks.segments]]
type = "docker"
style = "plain"
template = "  {{ .Context }} "
# display_mode = "context" es el default
